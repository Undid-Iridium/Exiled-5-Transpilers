List<CodeInstruction> newInstructions = ListPool<CodeInstruction>.Shared.Rent(instructions);
Label returnLabel = generator.DefineLabel();
Label printLabel = generator.DefineLabel(); //Our new label to work with 
int offset = 1;
int index = newInstructions.FindIndex(instruction => instruction.opcode == OpCodes.Ret) + offset;
// var ev = new ChangingGroupEventArgs(Player, UserGroup, true);
//
// if (!ev.IsAllowed){
//     Log.Info("ChangingGroupEvent was not allowed");
//     return;
// }
//
 newInstructions.InsertRange(index, new[]
        {
            new CodeInstruction(OpCodes.Ldarg_0).MoveLabelsFrom(newInstructions[index]),
            new(OpCodes.Call, PropertyGetter(typeof(ServerRoles), nameof(ServerRoles.gameObject))),
            new(OpCodes.Call, Method(typeof(API.Features.Player), nameof(API.Features.Player.Get), new[] { typeof(GameObject) })),
            new(OpCodes.Ldarg_1),
            new(OpCodes.Ldc_I4_1),
            new(OpCodes.Newobj, GetDeclaredConstructors(typeof(ChangingGroupEventArgs))[0]),
            new(OpCodes.Dup),
            new(OpCodes.Call, Method(typeof(Handlers.Player), nameof(Handlers.Player.OnChangingGroup))),
            new(OpCodes.Callvirt, PropertyGetter(typeof(ChangingGroupEventArgs), nameof(ChangingGroupEventArgs.IsAllowed))),
            new(OpCodes.Brfalse_S, printLabel), //We are jumping to our print label
            new CodeInstruction(OpCodes.Ldarg_0).WithLabels(printLabel), //This is where we marked our print label to be 
            new(OpCodes.Ldstr, "ChangingGroupEvent was not allowed"), //Our string we need added to the EStack
            new(OpCodes.Call, Method(typeof(API.Features.Log), nameof(API.Features.Log.Info))), //Our call to the method utilizing the EStack string
            new(OpCodes.Jmp, returnLabel), //Our immediate call to the return label
});
newInstructions[newInstructions.Count - 1].labels.Add(returnLabel);
for (int z = 0; z < newInstructions.Count; z++)
    yield return newInstructions[z];
ListPool<CodeInstruction>.Shared.Return(newInstructions);
/*
* 0x00000518 72DF000070   */ IL_0008: ldstr     "I correctly read the string config, its value is: "
    /* 0x0000051D 02           */ IL_000D: ldarg.0
    /* 0x0000051E 282100000A   */ IL_000E: call      instance !0 class [Exiled.API]Exiled.API.Features.Plugin1<class Exiled.Example.Config>::get_Config()
    /* 0x00000523 6F03000006   */ IL_0013: callvirt  instance string Exiled.Example.Config::get_String()
    /* 0x00000528 282200000A   */ IL_0018: call      string [mscorlib]System.String::Concat(string, string)
    /* 0x0000052D 282300000A   */ IL_001D: call      void [Exiled.API]Exiled.API.Features.Log::Warn(string)`
            /* 0x00005E2D 02           */ IL_0000: ldarg.0
    /* 0x00005E2E 6F8E02000A   */ IL_0001: callvirt  instance string class Exiled.API.Features.Plugin`1<!TConfig>::get_Name()
    /* 0x00005E33 72C7100070   */ IL_0006: ldstr     " has been disabled!"
    /* 0x00005E38 287A00000A   */ IL_000B: call      string [mscorlib]System.String::Concat(string, string)
    /* 0x00005E3D 2816010006   */ IL_0010: call      void Exiled.API.Features.Log::Info(string)
    /* 0x00005E42 2A           */ IL_0015: ret
*/